package net.is_bg.ltf.db.common.client;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import net.is_bg.ltf.db.common.client.ICustomParam.CustomParamBuilder;
import net.is_bg.ltf.db.common.customsql.IResultSetData;

class CustomPreparedStatement implements PreparedStatement {
	
	protected List<ICustomParam> params = new ArrayList<>();
	protected IConnectionOperation conop;
	protected PrepStatementAdditionalData additionalData = new PrepStatementAdditionalData();
	protected IResultSetData res;
	protected CustomResultSet customRes;
	private int connectionHandle;
	private String dsName;
	
	CustomPreparedStatement(IConnectionOperation conop, PrepStatementAdditionalData adData, int connectionHandle, String dsName ){
		this.conop = conop;
		this.connectionHandle = connectionHandle;
		this.additionalData =  adData;
		this.dsName = dsName;
	}

	static SqlData createInitSqlData() {
		return new SqlData();
	}
	
	protected void fillParams(SqlData data, String sql) {
		data.sql = sql;
		data.dsName = dsName;
		data.connectionHandle = connectionHandle;
		data.stringRepOfParams = CustomClientUtils.toString(params);
		data.stringRepOfPrepStatementAdditionalData = CustomClientUtils.toString(additionalData);
	}
	
	
	@Override
	public void addBatch(String sql) throws SQLException {
		
	}

	@Override
	public void cancel() throws SQLException {
		
	}

	@Override
	public void clearBatch() throws SQLException {
		
	}

	@Override
	public void clearWarnings() throws SQLException {
		
	}

	@Override
	public void close() throws SQLException {
		
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		return false;
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return false;
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return false;
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return false;
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return null;
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		SqlData data = createInitSqlData();
		additionalData.queryType = 1;
		fillParams(data, sql);
		res = conop.exeSelect(data);
		return CustomClientUtils.toResultSet(res);
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		SqlData data = createInitSqlData();
		additionalData.queryType = 2;
		fillParams(data, sql);
		res = conop.exeUpdate(data);
		return 0;// resultSetConverter.apply(res);
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		SqlData data = createInitSqlData();
		additionalData.queryType = 2;
		additionalData.autoGeneratedKeys = autoGeneratedKeys;
		fillParams(data, sql);
		res = conop.exeUpdate(data);
		return 0;
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		SqlData data = createInitSqlData();
		additionalData.queryType = 2;
		additionalData.columnIndexes = columnIndexes;
		fillParams(data, sql);
		res = conop.exeUpdate(data);
		return 0;
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		SqlData data = createInitSqlData();
		additionalData.queryType = 2;
		additionalData.columnNames = columnNames;
		fillParams(data, sql);
		res = conop.exeUpdate(data);
		return 0;
	}

	@Override
	public Connection getConnection() throws SQLException {
		return null;
	}

	@Override
	public int getFetchDirection() throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int getFetchSize() throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return null;
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return 0;
	}

	@Override
	public int getMaxRows() throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int getResultSetType() throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int getUpdateCount() throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isClosed() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isPoolable() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void addBatch() throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void clearParameters() throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean execute() throws SQLException {
		return false;
	}

	@Override
	public ResultSet executeQuery() throws SQLException {
		SqlData data = createInitSqlData();
		data.sql = additionalData.sql;
		additionalData.queryType = 1;
		fillParams(data, data.sql);
		res = conop.exeSelect(data);
		return CustomClientUtils.toResultSet(res);
	}

	@Override
	public int executeUpdate() throws SQLException {
		SqlData data = createInitSqlData();
		data.sql = additionalData.sql;
		additionalData.queryType = 1;
		fillParams(data, data.sql);
		res = conop.exeUpdate(data);
		return 0;
	}

	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		return CustomClientUtils.toMetaData(res.getColumnMetaData());
	}

	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		return new CustomParamaterMetaData();
	}

	@Override
	public void setArray(int parameterIndex, Array x) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(Types.NUMERIC);
		bd.setValue(x);
		params.add(bd.build());
		
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setBlob(int parameterIndex, Blob x) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(Types.BOOLEAN);
		bd.setValue(x);
		params.add(bd.build());
		
	}

	@Override
	public void setByte(int parameterIndex, byte x) throws SQLException {
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(Types.INTEGER);
		bd.setValue(x);
		params.add(bd.build());
		
	}

	@Override
	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(Types.OTHER);
		bd.setValue(x);
		params.add(bd.build());
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setClob(int parameterIndex, Clob x) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setClob(int parameterIndex, Reader reader) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setDate(int parameterIndex, Date x) throws SQLException {
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(Types.DATE);
		bd.setValue(x);
		params.add(bd.build());
		
	}

	@Override
	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
		setDate(parameterIndex, x);
	}

	@Override
	public void setDouble(int parameterIndex, double x) throws SQLException {
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(Types.DOUBLE);
		bd.setValue(x);
		params.add(bd.build());
		
	}

	@Override
	public void setFloat(int parameterIndex, float x) throws SQLException {
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(Types.FLOAT);
		bd.setValue(x);
		params.add(bd.build());
		
	}

	@Override
	public void setInt(int parameterIndex, int x) throws SQLException {
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(Types.INTEGER);
		bd.setValue(x);
		params.add(bd.build());
		
	}

	@Override
	public void setLong(int parameterIndex, long x) throws SQLException {
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(Types.BIGINT);
		bd.setValue(x);
		params.add(bd.build());
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setNClob(int parameterIndex, NClob value) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setNString(int parameterIndex, String value) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(sqlType);
		bd.setValue(null);
		params.add(bd.build());
		
	}

	@Override
	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
		setNull(parameterIndex, sqlType);
	}

	@Override
	public void setObject(int parameterIndex, Object x) throws SQLException {
		setObject(parameterIndex, x, x == null ? Types.NULL : Types.JAVA_OBJECT);
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(x == null ? Types.NULL :(  Types.JAVA_OBJECT==targetSqlType ? SqlTypeConverter.getSqlType(x) : targetSqlType));
		bd.setValue(x);
		params.add(bd.build());
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
		setObject(parameterIndex, x,targetSqlType);
	}

	@Override
	public void setRef(int parameterIndex, Ref x) throws SQLException {
		
	}

	@Override
	public void setRowId(int parameterIndex, RowId x) throws SQLException {
		
	}

	@Override
	public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
		
	}

	@Override
	public void setShort(int parameterIndex, short x) throws SQLException {
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(Types.SMALLINT);
		bd.setValue(x);
		params.add(bd.build());
	}

	@Override
	public void setString(int parameterIndex, String x) throws SQLException {
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(Types.VARCHAR);
		bd.setValue(x);
		params.add(bd.build());
		
	}

	@Override
	public void setTime(int parameterIndex, Time x) throws SQLException {
		// TODO Auto-generated method stub
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(Types.TIME);
		bd.setValue(x);
		params.add(bd.build());
	}

	@Override
	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
		// TODO Auto-generated method stub
		setTime(parameterIndex, x);
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
		// TODO Auto-generated method stub
		ICustomParam.CustomParamBuilder bd = new CustomParamBuilder();
		bd.setPosition(parameterIndex); bd.setType(Types.TIMESTAMP);
		bd.setValue(x);
		params.add(bd.build());
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
		setTimestamp(parameterIndex, x);
	}

	@Override
	public void setURL(int parameterIndex, URL x) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
		
	}

}
